                    +---------------------------+
        |   CS 140    |
        | PROJECT 3: VIRTUAL MEMORY |
        |    DESIGN DOCUMENT  |
        +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Gibeom Lim <kb28@unist.ac.kr>
Jinsu Kim <sis3141@unist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

      PAGE TABLE MANAGEMENT
      =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

When a program accesses a virtual address, the operating system 
searches a data structure that maps virtual addresses to physical 
frames. If the entry exists, the associated frame is returned, 
indicating the page is in memory. However, if no entry exists, 
it means the page is not in memory. In such cases, a page fault 
occurs, and the faulting address is used to find the corresponding 
entry. If found, the page is loaded from the swap space or file system 
into memory. This process ensures efficient memory management and 
enables programs to utilize virtual memory effectively.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

The coordination of accessed and dirty bits between kernel
and user virtual addresses that alias a single frame
is handled by the memory management unit (MMU) and the page 
table. The MMU automatically sets the accessed bit whenever a
page is accessed and the dirty bit whenever a page is written 
to. These bits are stored in the page table, which is indexed by virtual
addresses. Therefore, even if a kernel and a user virtual address
alias the same frame, their accessed and dirty bits can be managed 
independently.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

To prevent races when multiple user processes require a new frame 
simultaneously, synchronization mechanisms like locks or semaphores 
are employed. When a process needs to allocate a new frame, it must 
obtain a lock. If another process currently holds the lock, the 
second process will be blocked until the lock is released by the 
first process. This guarantees that only one process can allocate 
a new frame at a time,

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

Typically, a hash table is chosen as the data structure for 
representing virtual-to-physical mappings in page table management. 
Hash tables offer efficient operations for inserting, deleting, 
and searching entries, which are the fundamental operations required 
for managing the page table.

           PAGING TO AND FROM DISK
           =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

When there is a need for a frame but none are available, 
a page replacement algorithm is employed to select a frame 
to evict. The particular algorithm used can differ, but a 
popular choice is the Least Recently Used (LRU) algorithm. 
This algorithm evicts the frame that has remained unused 
for the longest duration, prioritizing the pages that have 
not been accessed recently.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

When a process takes over a frame previously used by another process, 
the page table is updated. The entry for the page in the old process's 
page table is removed, and a new entry is added to the new process's 
page table. Other related data structures, such as frame tables or swap 
tables, are also updated accordingly.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

The VM synchronization design can uses locks to prevent multiple
processes from accessing or modifying shared data structures at the
same time. Deadlock is prevented by ensuring that the four necessary
conditions for deadlock (mutual exclusion, hold and wait, no 
preemption, and circular wait) do not occur together. This is achieved 
by careful design of the lock acquisition and release order, and by 
avoiding nested lock acquisition.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

When a frame is being evicted, the process that owns the frame
is prevented from accessing or modifying the page during the eviction
process by acquiring a lock on the frame before the eviction starts
and releasing it after the eviction is complete. To avoid a race 
between evicting a frame and faulting the page back in, the page fault 
handler also acquires the lock on the frame before loading the page.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

When a page is being read from the file system or swap, other
processes are prevented from interfering by acquiring a lock on the
frame before the read starts and releasing it after the read is
complete. This ensures that no other process can evict the frame 
while it is still being read in.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?


---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

       MEMORY MAPPED FILES
       ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.


>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

The determination of whether a new file mapping overlaps any
existing segment is done by checking the virtual addresses of the existing
segments. When a new file mapping is created, the virtual address
where the file is to be mapped is compared with the virtual 
addresses of the existing segments. If the new mapping's address range 
overlaps with the address range of any existing segment, the mapping fails.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

         SURVEY QUESTIONS
         ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
